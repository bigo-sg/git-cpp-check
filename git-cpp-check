#!/usr/bin/env python
import argparse
import codecs
import os
import imp
import sys

p = argparse.ArgumentParser()
p.add_argument('--cpplint', help='path to cpplint.py'),
p.add_argument('--git-clang-format', help='path to git-clang-format'),
opts = p.parse_args(sys.argv[1:])

if opts.cpplint:
  cpplint = imp.load_source('*', opts.cpplint)
else:
  import cpplint

if opts.git_clang_format:
  gcf = imp.load_source('*', opts.git_clang_format)
else:
  gcf = imp.load_source('*', os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                          'git-clang-format'))

# Monkeypatch cpplint error function
_cpplint_file_errors = []
def CpplintError(filename, linenum, category, confidence, message):
  if cpplint._ShouldPrintError(category, confidence, linenum):
    _cpplint_file_errors.append((linenum, message))

cpplint.__dict__['Error'] = CpplintError


# Change stderr to write with replacement characters so we don't die
# if we try to print something containing non-ASCII characters.
sys.stderr = codecs.StreamReaderWriter(sys.stderr,
                                       codecs.getreader('utf8'),
                                       codecs.getwriter('utf8'),
                                       'replace')


default_extensions = ','.join([
  # From clang/lib/Frontend/FrontendOptions.cpp, all lower case
  'c', 'h',  # C
  'm',  # ObjC
  'mm',  # ObjC++
  'cc', 'cp', 'cpp', 'c++', 'cxx', 'hpp',  # C++
  # Other languages that clang-format supports
  'proto', 'protodevel',  # Protocol Buffers
  'js',  # JavaScript
  ])

config = gcf.load_git_config()
clangformat_binary = config.get('clangformat.binary', 'clang-format')
commit, files = (config.get('clangformat.commit', 'HEAD'), [])
# Lines changed in this git commit
changed_lines = gcf.compute_diff_and_extract_lines(commit, files)
gcf.filter_by_extension(changed_lines, default_extensions.lower().split(','))

# The computed diff outputs absolute paths, so we must cd before accessing
# those files.
gcf.cd_to_toplevel()
old_tree = gcf.create_tree_from_workdir(changed_lines)
new_tree = gcf.run_clang_format_and_save_to_tree(changed_lines,
                                                 binary=clangformat_binary,
                                                 style='Chromium')

sys.stderr.write('Clang-format:\n')
clang_format_made_changes = False
if old_tree != new_tree:
  changed_files = gcf.apply_changes(old_tree, new_tree)
  if len(changed_files) > 0:
    clang_format_made_changes = True
    gcf.print_diff(old_tree, new_tree)

sys.stderr.write('\nCpplint:\n')
cpplint_error_count = 0
for filename, ranges in changed_lines.iteritems():
  _cpplint_file_errors = []
  save_stderr = sys.stderr
  sys.stderr = open(os.devnull, "w")
  cpplint.ProcessFile(filename, 0)
  sys.stderr = save_stderr
  for linenum, message in _cpplint_file_errors:
    # Sometimes cpplint reports linenum=0 instead of the acutal line.
    if any((r.start <= linenum <= r.start + r.count for r in ranges)) or linenum == 0:
      cpplint_error_count += 1
      sys.stderr.write('%s:%s:  %s\n' % (filename, linenum, message))

if cpplint_error_count > 0:
  sys.exit(2)

if clang_format_made_changes:
  sys.exit(1)
